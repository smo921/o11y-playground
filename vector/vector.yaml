##############################################
#              MAIN CONFIG                   #
##############################################
api:
  enabled: true
  address: "0.0.0.0:8686"
data_dir: /data_dir

##############################################
#              BEGIN SOURCES                 #
##############################################
sources:
  vector_logs:
    type: internal_logs

  vector_metrics:
    type: internal_metrics

  docker:
    type: docker_logs
    include_labels:
      - logging.enabled=true

  random_json_1:
    type: demo_logs
    format: json
    interval: ${RANDOM_JSON_MESSAGE_INTERVAL:-0.001}  # seconds between messages ; 1k / sec
    count: ${RANDOM_JSON_MESSAGE_COUNT:-1000000000} # 1 Billion

  files:
    type: file
    include:
      - /log_files/*
    ignore_checkpoints: true
    max_line_bytes: 1049000 # 1MBi
    read_from: beginning
    remove_after_secs: 5

##############################################
#              BEGIN TRANSFORMS              #
##############################################
transforms:
  docker_decoration:
    type: remap
    inputs:
      - docker
    source: |
      .loki_labels = {
        "service_name": .label.service,
        "source": "docker"
      }
      .loki = { "tenant_id": "default" }

  files_decoration:
    type: remap
    inputs:
      - files
    source: |
      .source_file = .file

      if is_string(.message) {
        message, err = parse_json(.message)
        if err == null {
          del(.message)
          merged, err = merge(., message)
          if err == null {
            . = merged
          }
        }
      }

      .loki_labels = {
        "source": .source.file || "files",
        "service_name": .service.name || .service || .application || "unknown"
      }

      .loki = { "tenant_id": "testing" }

  internal_log_decoration:
    type: remap
    inputs:
      - vector_logs
    source: |
      .loki_labels = {
        "service_name": "vector",
        "source": "vector"
      }
      .loki = { "tenant_id": "default" }

  decorate_random_json:
    type: remap
    inputs:
      - random_json_*
    source: |
      message, err = parse_json(.message, max_depth: 30)
      if err == null {
        . = merge!(., message)
        del(.message)
      }

      .loki_labels = {
        "service_name": "random_json",
        "source": "random_json"
      }
      .loki = { "tenant_id": "default" }

##############################################
#              BEGIN SINKS                   #
##############################################
sinks:
  local_loki:
    type: loki
    inputs:
      - internal_log_decoration
      - files_decoration
      - decorate_random_json
      - docker_decoration
    endpoint: http://loki:3100
    encoding:
      codec: json
    labels:
      "*": "{{ loki_labels }}"
    remove_label_fields: true
    out_of_order_action: accept
    tenant_id: "{{ .loki.tenant_id }}"

  local_influxdb:
    type: influxdb_metrics
    inputs:
      - vector_metrics
    bucket: ${VECTOR_INFLUXDB_METRICS_BUCKET}
    endpoint: http://influxdb:8086/
    org: test_org
    token: ${VECTOR_INFLUXDB_TOKEN}

  local_prometheus:
    type: prometheus_remote_write
    inputs:
      - vector_metrics
    endpoint: http://prometheus:9090/api/v1/write
